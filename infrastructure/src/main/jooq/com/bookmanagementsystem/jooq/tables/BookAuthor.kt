/*
 * This file is generated by jOOQ.
 */
package com.bookmanagementsystem.jooq.tables


import com.bookmanagementsystem.jooq.Public
import com.bookmanagementsystem.jooq.keys.BOOK_AUTHOR_PKEY
import com.bookmanagementsystem.jooq.keys.BOOK_AUTHOR__BOOK_AUTHOR_AUTHOR_ID_FKEY
import com.bookmanagementsystem.jooq.keys.BOOK_AUTHOR__BOOK_AUTHOR_BOOK_ID_FKEY
import com.bookmanagementsystem.jooq.tables.Author.AuthorPath
import com.bookmanagementsystem.jooq.tables.Book.BookPath
import com.bookmanagementsystem.jooq.tables.records.BookAuthorRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * 書籍と著者の中間テーブル（多対多対応）
 */
@Suppress("UNCHECKED_CAST")
open class BookAuthor(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BookAuthorRecord>?,
    parentPath: InverseForeignKey<out Record, BookAuthorRecord>?,
    aliased: Table<BookAuthorRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BookAuthorRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("書籍と著者の中間テーブル（多対多対応）"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.book_author</code>
         */
        val BOOK_AUTHOR: BookAuthor = BookAuthor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookAuthorRecord> = BookAuthorRecord::class.java

    /**
     * The column <code>public.book_author.book_id</code>. 書籍ID（外部キー）
     */
    val BOOK_ID: TableField<BookAuthorRecord, Int?> = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "書籍ID（外部キー）")

    /**
     * The column <code>public.book_author.author_id</code>. 著者ID（外部キー）
     */
    val AUTHOR_ID: TableField<BookAuthorRecord, Int?> = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "著者ID（外部キー）")

    /**
     * The column <code>public.book_author.version</code>. バージョン（楽観的ロック用）
     */
    val VERSION: TableField<BookAuthorRecord, Int?> = createField(DSL.name("version"), SQLDataType.INTEGER, this, "バージョン（楽観的ロック用）")

    private constructor(alias: Name, aliased: Table<BookAuthorRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BookAuthorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BookAuthorRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.book_author</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.book_author</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.book_author</code> table reference
     */
    constructor(): this(DSL.name("book_author"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BookAuthorRecord>?, parentPath: InverseForeignKey<out Record, BookAuthorRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BOOK_AUTHOR, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BookAuthorPath : BookAuthor, Path<BookAuthorRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BookAuthorRecord>?, parentPath: InverseForeignKey<out Record, BookAuthorRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BookAuthorRecord>): super(alias, aliased)
        override fun `as`(alias: String): BookAuthorPath = BookAuthorPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BookAuthorPath = BookAuthorPath(alias, this)
        override fun `as`(alias: Table<*>): BookAuthorPath = BookAuthorPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<BookAuthorRecord> = BOOK_AUTHOR_PKEY
    override fun getReferences(): List<ForeignKey<BookAuthorRecord, *>> = listOf(BOOK_AUTHOR__BOOK_AUTHOR_AUTHOR_ID_FKEY, BOOK_AUTHOR__BOOK_AUTHOR_BOOK_ID_FKEY)

    private lateinit var _author: AuthorPath

    /**
     * Get the implicit join path to the <code>public.author</code> table.
     */
    fun author(): AuthorPath {
        if (!this::_author.isInitialized)
            _author = AuthorPath(this, BOOK_AUTHOR__BOOK_AUTHOR_AUTHOR_ID_FKEY, null)

        return _author;
    }

    val author: AuthorPath
        get(): AuthorPath = author()

    private lateinit var _book: BookPath

    /**
     * Get the implicit join path to the <code>public.book</code> table.
     */
    fun book(): BookPath {
        if (!this::_book.isInitialized)
            _book = BookPath(this, BOOK_AUTHOR__BOOK_AUTHOR_BOOK_ID_FKEY, null)

        return _book;
    }

    val book: BookPath
        get(): BookPath = book()
    override fun `as`(alias: String): BookAuthor = BookAuthor(DSL.name(alias), this)
    override fun `as`(alias: Name): BookAuthor = BookAuthor(alias, this)
    override fun `as`(alias: Table<*>): BookAuthor = BookAuthor(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BookAuthor = BookAuthor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BookAuthor = BookAuthor(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BookAuthor = BookAuthor(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): BookAuthor = BookAuthor(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): BookAuthor = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): BookAuthor = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): BookAuthor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): BookAuthor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): BookAuthor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): BookAuthor = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): BookAuthor = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): BookAuthor = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): BookAuthor = where(DSL.notExists(select))
}
