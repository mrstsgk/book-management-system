/*
 * This file is generated by jOOQ.
 */
package com.bookmanagementsystem.jooq.tables


import com.bookmanagementsystem.jooq.Public
import com.bookmanagementsystem.jooq.keys.AUTHOR_BOOK__AUTHOR_BOOK_BOOK_ID_FKEY
import com.bookmanagementsystem.jooq.keys.BOOK_PKEY
import com.bookmanagementsystem.jooq.tables.Author.AuthorPath
import com.bookmanagementsystem.jooq.tables.AuthorBook.AuthorBookPath
import com.bookmanagementsystem.jooq.tables.records.BookRecord

import java.math.BigDecimal

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * 書籍情報を管理するテーブル
 */
@Suppress("UNCHECKED_CAST")
open class Book(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BookRecord>?,
    parentPath: InverseForeignKey<out Record, BookRecord>?,
    aliased: Table<BookRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BookRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("書籍情報を管理するテーブル"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.book</code>
         */
        val BOOK: Book = Book()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookRecord> = BookRecord::class.java

    /**
     * The column <code>public.book.id</code>. 書籍ID（主キー）
     */
    val ID: TableField<BookRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "書籍ID（主キー）")

    /**
     * The column <code>public.book.title</code>. 書籍タイトル
     */
    val TITLE: TableField<BookRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "書籍タイトル")

    /**
     * The column <code>public.book.price</code>. 価格（円）
     */
    val PRICE: TableField<BookRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "価格（円）")

    /**
     * The column <code>public.book.publish_status</code>. 出版状況（1: 未出版, 2: 出版済み）
     */
    val PUBLISH_STATUS: TableField<BookRecord, Int?> = createField(DSL.name("publish_status"), SQLDataType.INTEGER.nullable(false), this, "出版状況（1: 未出版, 2: 出版済み）")

    /**
     * The column <code>public.book.version</code>. バージョン（楽観的ロック用）
     */
    val VERSION: TableField<BookRecord, Int?> = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "バージョン（楽観的ロック用）")

    private constructor(alias: Name, aliased: Table<BookRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BookRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BookRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.book</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.book</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.book</code> table reference
     */
    constructor(): this(DSL.name("book"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BookRecord>?, parentPath: InverseForeignKey<out Record, BookRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BOOK, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BookPath : Book, Path<BookRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BookRecord>?, parentPath: InverseForeignKey<out Record, BookRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BookRecord>): super(alias, aliased)
        override fun `as`(alias: String): BookPath = BookPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BookPath = BookPath(alias, this)
        override fun `as`(alias: Table<*>): BookPath = BookPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<BookRecord, Int?> = super.getIdentity() as Identity<BookRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<BookRecord> = BOOK_PKEY

    private lateinit var _authorBook: AuthorBookPath

    /**
     * Get the implicit to-many join path to the <code>public.author_book</code>
     * table
     */
    fun authorBook(): AuthorBookPath {
        if (!this::_authorBook.isInitialized)
            _authorBook = AuthorBookPath(this, null, AUTHOR_BOOK__AUTHOR_BOOK_BOOK_ID_FKEY.inverseKey)

        return _authorBook;
    }

    val authorBook: AuthorBookPath
        get(): AuthorBookPath = authorBook()

    /**
     * Get the implicit many-to-many join path to the <code>public.author</code>
     * table
     */
    val author: AuthorPath
        get(): AuthorPath = authorBook().author()
    override fun `as`(alias: String): Book = Book(DSL.name(alias), this)
    override fun `as`(alias: Name): Book = Book(alias, this)
    override fun `as`(alias: Table<*>): Book = Book(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Book = Book(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Book = Book(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Book = Book(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Book = Book(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Book = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Book = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Book = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Book = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Book = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Book = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Book = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Book = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Book = where(DSL.notExists(select))
}
